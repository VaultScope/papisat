using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Collections.ObjectModel;
using System.Linq;

namespace VaultScope.Enterprise.WPF.ViewModels;

/// <summary>
/// View model for the Vulnerability Scanner page
/// </summary>
public partial class VulnerabilityScannerViewModel : BaseViewModel
{
    public VulnerabilityScannerViewModel()
    {
        // Initialize with default values
        TargetUrl = string.Empty;
        SelectedScanProfile = ScanProfiles.FirstOrDefault();
        
        // Initialize security checks
        SecurityChecks = new ObservableCollection<SecurityCheckViewModel>
        {
            new SecurityCheckViewModel { Name = "SQL Injection", Description = "Detect SQL injection vulnerabilities", IsEnabled = true },
            new SecurityCheckViewModel { Name = "Cross-Site Scripting (XSS)", Description = "Detect XSS vulnerabilities", IsEnabled = true },
            new SecurityCheckViewModel { Name = "Security Headers", Description = "Check for missing security headers", IsEnabled = true },
            new SecurityCheckViewModel { Name = "Authentication Bypass", Description = "Test authentication mechanisms", IsEnabled = true },
            new SecurityCheckViewModel { Name = "Path Traversal", Description = "Detect directory traversal vulnerabilities", IsEnabled = true },
            new SecurityCheckViewModel { Name = "Command Injection", Description = "Test for command injection flaws", IsEnabled = true },
            new SecurityCheckViewModel { Name = "Rate Limiting", Description = "Check rate limiting implementation", IsEnabled = false },
            new SecurityCheckViewModel { Name = "XXE (XML External Entity)", Description = "Test for XXE vulnerabilities", IsEnabled = false }
        };
    }

    /// <summary>
    /// Target URL for the security scan
    /// </summary>
    [ObservableProperty]
    private string targetUrl = string.Empty;

    /// <summary>
    /// Selected scan profile
    /// </summary>
    [ObservableProperty]
    private string? selectedScanProfile;

    /// <summary>
    /// Available scan profiles
    /// </summary>
    public ObservableCollection<string> ScanProfiles { get; } = new ObservableCollection<string>
    {
        "Quick Scan",
        "Comprehensive Scan",
        "Custom Scan",
        "OWASP Top 10",
        "Penetration Test"
    };

    /// <summary>
    /// Collection of security checks
    /// </summary>
    [ObservableProperty]
    private ObservableCollection<SecurityCheckViewModel> securityChecks;

    /// <summary>
    /// Indicates whether a scan is currently running
    /// </summary>
    [ObservableProperty]
    private bool isScanRunning;

    /// <summary>
    /// Current scan progress (0-100)
    /// </summary>
    [ObservableProperty]
    private int scanProgress;

    /// <summary>
    /// Current scan status message
    /// </summary>
    [ObservableProperty]
    private string scanStatusMessage = "Ready to scan";

    /// <summary>
    /// Indicates whether the target URL is valid
    /// </summary>
    public bool IsTargetUrlValid => !string.IsNullOrWhiteSpace(TargetUrl) && Uri.TryCreate(TargetUrl, UriKind.Absolute, out _);

    /// <summary>
    /// Indicates whether the scan can be started
    /// </summary>
    public bool CanStartScan => IsTargetUrlValid && !IsScanRunning && SecurityChecks.Any(c => c.IsEnabled);

    /// <summary>
    /// Command to start the security scan
    /// </summary>
    [RelayCommand]
    private async Task StartScanAsync()
    {
        if (!CanStartScan) return;

        IsScanRunning = true;
        ScanProgress = 0;
        ClearError();

        try
        {
            var enabledChecks = SecurityChecks.Where(c => c.IsEnabled).ToList();
            var totalChecks = enabledChecks.Count;

            for (int i = 0; i < totalChecks; i++)
            {
                var check = enabledChecks[i];
                ScanStatusMessage = $"Running {check.Name}...";
                
                // Simulate scan operation
                await Task.Delay(2000);
                
                ScanProgress = (int)((i + 1) / (double)totalChecks * 100);
            }

            ScanStatusMessage = "Scan completed successfully";
        }
        catch (Exception ex)
        {
            SetError($"Scan failed: {ex.Message}");
            ScanStatusMessage = "Scan failed";
        }
        finally
        {
            IsScanRunning = false;
        }
    }

    /// <summary>
    /// Command to stop the current scan
    /// </summary>
    [RelayCommand]
    private void StopScan()
    {
        IsScanRunning = false;
        ScanStatusMessage = "Scan stopped";
        ScanProgress = 0;
    }

    /// <summary>
    /// Command to reset the scan configuration
    /// </summary>
    [RelayCommand]
    private void ResetConfiguration()
    {
        TargetUrl = string.Empty;
        SelectedScanProfile = ScanProfiles.FirstOrDefault();
        ScanProgress = 0;
        ScanStatusMessage = "Ready to scan";
        ClearError();
        
        // Reset security checks to default
        foreach (var check in SecurityChecks.Take(6))
        {
            check.IsEnabled = true;
        }
        foreach (var check in SecurityChecks.Skip(6))
        {
            check.IsEnabled = false;
        }
    }

    partial void OnTargetUrlChanged(string value)
    {
        OnPropertyChanged(nameof(IsTargetUrlValid));
        OnPropertyChanged(nameof(CanStartScan));
    }

    partial void OnIsScanRunningChanged(bool value)
    {
        OnPropertyChanged(nameof(CanStartScan));
    }
}

/// <summary>
/// View model for individual security checks
/// </summary>
public partial class SecurityCheckViewModel : ObservableObject
{
    [ObservableProperty]
    private string name = string.Empty;

    [ObservableProperty]
    private string description = string.Empty;

    [ObservableProperty]
    private bool isEnabled;
}